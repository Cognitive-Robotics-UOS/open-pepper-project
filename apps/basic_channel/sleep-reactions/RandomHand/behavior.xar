<?xml version="1.0" encoding="UTF-8" ?>
<ChoregrapheProject xmlns="http://www.aldebaran-robotics.com/schema/choregraphe/project.xsd" xar_version="3">
    <Box name="root" id="-1" localization="8" tooltip="Root box of Choregraphe&apos;s behavior. Highest level possible." x="0" y="0">
        <bitmap>media/images/box/root.png</bitmap>
        <script language="4">
            <content>
                <![CDATA[]]>
</content>
        </script>
        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
        <Timeline enable="0">
            <BehaviorLayer name="behavior_layer1">
                <BehaviorKeyframe name="keyframe1" index="1">
                    <Diagram>
                        <Box name="RandHand" id="1" localization="8" tooltip="" x="86" y="33">
                            <bitmap>media/images/box/box-python-script.png</bitmap>
                            <script language="4">
                                <content>
                                    <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        self.life = self.session().service("ALAutonomousLife")

    def onUnload(self):
        pass

    def onInput_onStart(self):
        import math
        import random

        hand = random.choice([ "LHand", "RHand" ])

        try:
            self.motion.setCollisionProtectionEnabled(chain, False)
        except:
            pass
        try:
            self.motion.setExternalCollisionProtectionEnabled(chain, False)
        except:
            pass

        timesAngles  = { hand : {"times": [], "angles":[]} }
        previousAngle = ALMotion.getAngles(hand, False)[0]
        previousTime = 0

        for i in range(0, random.randint(1, 4)):
            sign = random.choice([ -1, 1 ])
            if 0.0 <= previousAngle <= 0.2:
                sign = 1
            elif 0.8 <= previousAngle <= 1.0:
                sign = -1
            timesAngles[hand]["angles"].append(sign * random.uniform(0, 0.3))
            timesAngles[hand]["times"].append(random.uniform(previousTime + 1, previousTime + 3))
            previousAngle = previousAngle + timesAngles[hand]["angles"][i]
            previousTime  = timesAngles[hand]["times"][i]

        times  = [v["times"] for h, v in timesAngles.iteritems()]
        angles = [v["angles"] for h, v in timesAngles.iteritems()]

        ALMotion.setStiffnesses(hand, 1.0)
        ALMotion.angleInterpolation(hand, angles, times, False)

        current_time = int(self.life.getLifeTime())
        next_time = int(current_time + random.randint(1,7))
        ALMemory.raiseEvent("_SleepReactions/NextHandTime", next_time)

        self.onStopped()

    def onInput_onStop(self):
        self.onUnload()
        self.onStopped()]]>
</content>
                            </script>
                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                        </Box>
                        <Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="2" />
                        <Link inputowner="0" indexofinput="4" outputowner="1" indexofoutput="4" />
                    </Diagram>
                </BehaviorKeyframe>
            </BehaviorLayer>
        </Timeline>
    </Box>
</ChoregrapheProject>
