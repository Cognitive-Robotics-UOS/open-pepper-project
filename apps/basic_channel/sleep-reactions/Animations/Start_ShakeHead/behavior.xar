<?xml version="1.0" encoding="UTF-8" ?>
<ChoregrapheProject xmlns="http://www.aldebaran-robotics.com/schema/choregraphe/project.xsd" xar_version="3">
    <Box name="root" id="-1" localization="8" tooltip="Root box of Choregraphe&apos;s behavior. Highest level possible." x="0" y="0">
        <bitmap>media/images/box/root.png</bitmap>
        <script language="4">
            <content>
                <![CDATA[]]>
</content>
        </script>
        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
        <Timeline enable="0">
            <BehaviorLayer name="behavior_layer1">
                <BehaviorKeyframe name="keyframe1" index="1">
                    <Diagram>
                        <Box name="FallAsleep Shake" id="6" localization="8" tooltip="" x="73" y="17">
                            <bitmap>media/images/box/box-python-script.png</bitmap>
                            <script language="4">
                                <content>
                                    <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        # proxies
        self.motion       = self.session().service("ALMotion")
        self.leds         = self.session().service("ALLeds")

    def onUnload(self):
        pass

    def onInput_onStart(self):
        import math

        # shake head with leds blinking
        joints = [ "HeadYaw" ]
        headYaw = self.motion.getAngles(joints, False)[0]
        times  = [ [ 0.25, 0.5, 0.75 ] ]
        moves  = [ [headYaw + math.radians(7), headYaw - math.radians(9), headYaw + math.radians(8)] ]
        leds   = [
            [0.0, 0.0, 0.0, 0.3],
            [0.53, 0.0, 0.8, 0],
            [0.0, 0.0, 0.0, 0.3],
            [0.4, 0.0, 0.6, 0],
        ]

        future = qi.async(self.ledsAnimation, "sleep-semiFaceLeds", leds)
        self.motion.angleInterpolationBezier(joints, times, moves)
        future.wait()

        # center head
        joints = [ "HeadYaw", "HeadPitch" ]
        headYaw, headPitch = self.motion.getAngles(joints, False)
        headYaw = abs(headYaw)
        headPitch = abs(0.7 - headPitch)
        greatestAngle = max(headYaw, headPitch)
        # let's go at a speed of 3.0 seconds for 90 degrees (1.57 radians)
        duration = greatestAngle * (3.0 / 1.57)
        moves = [
            [0],
            [0.7],
        ]
        times = [
            [duration],
            [duration],
        ]

        self.motion.angleInterpolationBezier(joints, times, moves)

        self.onStopped()

    def ledsAnimation(self, ledsGroup, configs):
        for config in configs:
            r, g, b, delay = config
            self.leds.fadeRGB(ledsGroup, r, g, b, delay)

    def onInput_onStop(self):
        self.onUnload()
        self.onStopped()]]>
</content>
                            </script>
                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="" id="4" />
                            <Resource name="All motors" type="Lock" timeout="1" />
                            <Resource name="Leds" type="Lock" timeout="1" />
                            <Resource name="Speakers" type="Lock" timeout="1" />
                            <Resource name="Stiffness" type="Lock" timeout="1" />
                        </Box>
                        <Link inputowner="6" indexofinput="2" outputowner="0" indexofoutput="2" />
                        <Link inputowner="0" indexofinput="4" outputowner="6" indexofoutput="4" />
                    </Diagram>
                </BehaviorKeyframe>
            </BehaviorLayer>
        </Timeline>
    </Box>
</ChoregrapheProject>
